<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MacPlay (Posts about vim)</title><link>https://macplay.github.io/</link><description></description><atom:link href="https://macplay.github.io/categories/cat_vim.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:ashfinal@sina.cn"&gt;ashfinal&lt;/a&gt; </copyright><lastBuildDate>Fri, 16 Mar 2018 11:57:51 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>【译】Vim 不需要多光标编辑功能</title><link>https://macplay.github.io/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;Sublime text 首次引入了多光标编辑功能 &lt;a class="footnote-reference" href="https://macplay.github.io/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/#id2" id="id1"&gt;[1]&lt;/a&gt; （据我所知），这意味着可以在多个光标位置同时编辑代码。Vim 有个插件（&lt;a class="reference external" href="https://github.com/terryma/vim-multiple-cursors"&gt;vim-multiple-cursors&lt;/a&gt; ）模仿这一功能，但是存在一些问题。自动补全功能失效，撤销历史与我想象中的不一样，也无法把文本操作映射到某按键，以便在下次 Vim 会话中使用。还有，很难用眼睛跟踪所有光标，特别是当它们处于不同列的时候。使用该插件一段时间后，我得出结论：没有什么操作场景是 &lt;strong&gt;原生&lt;/strong&gt; Vim 特性无法完成的（以个人观点来看，完成的甚至比插件还要好）。&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://macplay.github.io/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;我首次使用多光标编辑，是在 &lt;a class="reference external" href="http://www.scintilla.org/SciTE.html"&gt;SciTE&lt;/a&gt; 中。与 Sublime Text 一样，都使用相同的组件 Scintilla。SciTE 出现时间比 Sublime Text 更早，因此作者这一说法不太准确。——译者注&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>translation</category><category>vim</category><guid>https://macplay.github.io/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/</guid><pubDate>Tue, 21 Nov 2017 10:42:02 GMT</pubDate></item><item><title>Vim 弄丢了我的数据！</title><link>https://macplay.github.io/posts/vim-nong-diu-liao-wo-de-shu-ju/</link><dc:creator>ashfinal</dc:creator><description>&lt;div class="section" id="id1"&gt;
&lt;h2&gt;悲剧&lt;/h2&gt;
&lt;p&gt;昨天（啊不， &lt;span class="strike"&gt;前天&lt;/span&gt; &lt;span class="amend"&gt;大前天&lt;/span&gt; ）在写 &lt;a class="reference external" href="https://macplay.github.io/posts/zai-vim-zhong-shi-yong-undo-branches/"&gt;undo branches&lt;/a&gt; 那篇文章的时候，&lt;a class="reference external" href="https://github.com/qvacua/vimr"&gt;VimR&lt;/a&gt; 编辑器突然毫无征兆的崩溃退出，导致花费好半天翻译过来的几段文字全部丢失。颇具有讽刺意味的是，当时写的文章正是关于在 Vim 编辑器中如何使用 undo branches，避免丢失你宝贵的资料。事情发生时笔者从浏览器中复制了一段文字，然后直接按下 &lt;cite&gt;CMD + V&lt;/cite&gt; 粘贴，可能是其中含有一些特殊字符……悲剧就这样发生了。&lt;/p&gt;
&lt;p&gt;第一反应是去查看 undo 历史，很不幸那几段文字并没有保存其中。于是悲哀地意识到它们是永远也找不回来了：因为 undo branches 其实是保存文件撤销记录，而不是用来应对这种意外灾难的。&lt;strong&gt;真正的灾难应对机制已经被我关闭。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/vim-nong-diu-liao-wo-de-shu-ju/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>recovery</category><category>vim</category><category>vimrc</category><guid>https://macplay.github.io/posts/vim-nong-diu-liao-wo-de-shu-ju/</guid><pubDate>Mon, 13 Nov 2017 11:57:10 GMT</pubDate></item><item><title>在 Markdown 及 rst 文档中使用代码补全功能</title><link>https://macplay.github.io/posts/zai-markdown-ji-rst-wen-dang-zhong-shi-yong-dai-ma-bu-quan-gong-neng/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;大家都知道，写 Markdown 文档时可以使用代码区块（Code Blocks)。给代码片段指定语言类型，就有漂亮的语法高亮效果。那有没有想过，直接在代码区块中写 Python 代码呢？&lt;/p&gt;
&lt;p&gt;这个事情还真可以做到，方法是使用 Neovim + ncm。&lt;a class="reference external" href="https://github.com/roxma/nvim-completion-manager"&gt;ncm&lt;/a&gt; 全称 “nvim-completion-manager”，是针对 &lt;a class="reference external" href="https://github.com/neovim/neovim"&gt;Neovim&lt;/a&gt; 编辑器的一款异步补全框架（插件）。笔者从 &lt;a class="reference external" href="https://www.vim.org"&gt;Vim&lt;/a&gt; 转到 &lt;a class="reference external" href="https://github.com/neovim/neovim"&gt;Neovim&lt;/a&gt; ，重新搜寻补全插件的过程中，经过与 &lt;a class="reference external" href="https://github.com/Shougo/deoplete.nvim"&gt;deoplete&lt;/a&gt; &lt;a class="footnote-reference" href="https://macplay.github.io/posts/zai-markdown-ji-rst-wen-dang-zhong-shi-yong-dai-ma-bu-quan-gong-neng/#id2" id="id1"&gt;[1]&lt;/a&gt; 的比较，迅速入了 &lt;a class="reference external" href="https://github.com/roxma/nvim-completion-manager"&gt;ncm&lt;/a&gt; 的坑。;-)&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://macplay.github.io/posts/zai-markdown-ji-rst-wen-dang-zhong-shi-yong-dai-ma-bu-quan-gong-neng/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;另一款异步补全插件，由 Vim 大神 &lt;a class="reference external" href="https://github.com/Shougo"&gt;Shougo&lt;/a&gt; 开发。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/zai-markdown-ji-rst-wen-dang-zhong-shi-yong-dai-ma-bu-quan-gong-neng/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>completion</category><category>vim</category><guid>https://macplay.github.io/posts/zai-markdown-ji-rst-wen-dang-zhong-shi-yong-dai-ma-bu-quan-gong-neng/</guid><pubDate>Thu, 12 Oct 2017 07:45:30 GMT</pubDate></item></channel></rss>