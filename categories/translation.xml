<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MacPlay (Posts about translation)</title><link>https://macplay.github.io/</link><description></description><atom:link href="https://macplay.github.io/categories/translation.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017 &lt;a href="mailto:ashfinal@sina.cn"&gt;ashfinal&lt;/a&gt; </copyright><lastBuildDate>Thu, 07 Dec 2017 14:46:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>【译】Vim 不需要多光标编辑功能</title><link>https://macplay.github.io/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;Sublime text 首次引入了多光标编辑功能 &lt;a class="footnote-reference" href="https://macplay.github.io/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/#id2" id="id1"&gt;[1]&lt;/a&gt; （据我所知），这意味着可以在多个光标位置同时编辑代码。Vim 有个插件（&lt;a class="reference external" href="https://github.com/terryma/vim-multiple-cursors"&gt;vim-multiple-cursors&lt;/a&gt; ）模仿这一功能，但是存在一些问题。自动补全功能失效，撤销历史与我想象中的不一样，也无法把文本操作映射到某按键，以便在下次 Vim 会话中使用。还有，很难用眼睛跟踪所有光标，特别是当它们处于不同列的时候。使用该插件一段时间后，我得出结论：没有什么操作场景是 &lt;strong&gt;原生&lt;/strong&gt; Vim 特性无法完成的（以个人观点来看，完成的甚至比插件还要好）。&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://macplay.github.io/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;我首次使用多光标编辑，是在 &lt;a class="reference external" href="http://www.scintilla.org/SciTE.html"&gt;SciTE&lt;/a&gt; 中。与 Sublime Text 一样，都使用相同的组件 Scintilla。SciTE 出现时间比 Sublime Text 更早，因此作者这一说法不太准确。——译者注&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>translation</category><category>vim</category><guid>https://macplay.github.io/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/</guid><pubDate>Tue, 21 Nov 2017 10:42:02 GMT</pubDate></item><item><title>【译】在 Vim 中使用 undo branches</title><link>https://macplay.github.io/posts/zai-vim-zhong-shi-yong-undo-branches/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;Vim 支持标准的 &lt;a class="reference external" href="http://vim.wikia.com/wiki/Undo_and_Redo"&gt;撤销和重做&lt;/a&gt; ，同时还支持 &lt;cite&gt;undo branches&lt;/cite&gt; 。这允许你撤销一些更改，然后再做新的更改，而在此过程中 &lt;strong&gt;所有&lt;/strong&gt; 的更改都在 &lt;cite&gt;undo tree&lt;/cite&gt; 中得到保留。你甚至还能把撤销（undo）记录保存到文件中，下次编辑同一文件时恢复这些记录。本文将向你初步展示如何在 Vim 中使用 &lt;cite&gt;undo branches&lt;/cite&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/zai-vim-zhong-shi-yong-undo-branches/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>translation</category><category>vim</category><guid>https://macplay.github.io/posts/zai-vim-zhong-shi-yong-undo-branches/</guid><pubDate>Mon, 13 Nov 2017 03:14:24 GMT</pubDate></item><item><title>【译】8 个 Vim 技巧让你成为专家级用户</title><link>https://macplay.github.io/posts/8-ge-vim-ji-qiao-rang-ni-cheng-wei-zhuan-jia-ji-yong-hu/</link><dc:creator>ashfinal</dc:creator><description>&lt;figure&gt;&lt;img src="https://macplay.github.io/images/vim-tips-tricks.jpg"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;&lt;strong&gt;提要&lt;/strong&gt; ：在这篇文章里，我将用实际例子向你展示一些我最喜爱的 &lt;strong&gt;Vim 技巧&lt;/strong&gt; 。如果你不使用 Vim，这些技巧并不会给你多少理由让你想使用它。但是，如果你已经在使用，那本文无疑会让你成为更专业的 Vim 用户。&lt;/p&gt;
&lt;p&gt;即便最近开始，我越来越多地使用 &lt;a class="reference external" href="https://atom.io/"&gt;Atom&lt;/a&gt; ，然而不使用 &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; 却让我一天也过不下去。并不是因为我不得不使用它，而是这样做让我感到很舒适。&lt;/p&gt;
&lt;p&gt;是的，舒适。当谈及 Vi 编辑器或任何它的变种时，这是个太奇怪的词语，对不对？的确，我承认，Vi 不是那个最符合直觉的文本编辑器。&lt;/p&gt;
&lt;p&gt;但是，经过一些实践及记忆训练后，你可以通过仅仅几次击键，就能完成看似复杂的编辑任务，使用一些别的命令行编辑器无法实现的功能。&lt;/p&gt;
&lt;p&gt;尽管如此，今天我并不想写“Vi 入门介绍”，我想通过个人常用的技巧——一些在其它编辑器中我梦寐以求的技巧，向你展示 Vi(m) 编辑器的真正威力。我并不会对这些技巧做全面的阐释，但我强烈推荐你反复试验，直到你理解它们是如何工作的。&lt;/p&gt;
&lt;p&gt;如果你喜欢 Vim 并想完全掌握它，你也可以参与由 Linux Training Academy 提供的 Vim 在线课程。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/8-ge-vim-ji-qiao-rang-ni-cheng-wei-zhuan-jia-ji-yong-hu/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>terminal</category><category>translation</category><category>vim</category><guid>https://macplay.github.io/posts/8-ge-vim-ji-qiao-rang-ni-cheng-wei-zhuan-jia-ji-yong-hu/</guid><pubDate>Thu, 02 Nov 2017 12:44:53 GMT</pubDate></item><item><title>【译】为何我还在使用 Vim 编辑器？</title><link>https://macplay.github.io/posts/wei-he-wo-huan-zai-shi-yong-vim-bian-ji-qi/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;blockquote&gt;
哦不，并不是因为我不知道怎么退出它。 &lt;a class="footnote-reference" href="https://macplay.github.io/posts/wei-he-wo-huan-zai-shi-yong-vim-bian-ji-qi/#id7" id="id1"&gt;[1]&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="/images/vim_skin.jpeg" src="https://macplay.github.io/images/vim_skin.jpeg"&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/wei-he-wo-huan-zai-shi-yong-vim-bian-ji-qi/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>benchmark</category><category>translation</category><category>vim</category><guid>https://macplay.github.io/posts/wei-he-wo-huan-zai-shi-yong-vim-bian-ji-qi/</guid><pubDate>Tue, 31 Oct 2017 12:45:28 GMT</pubDate></item></channel></rss>