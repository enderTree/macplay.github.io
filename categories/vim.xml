<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MacPlay (Posts about vim)</title><link>https://macplay.github.io/</link><description></description><atom:link href="https://macplay.github.io/categories/vim.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:ashfinal@sina.cn"&gt;ashfinal&lt;/a&gt; </copyright><lastBuildDate>Sun, 15 Apr 2018 15:20:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Oni 0.32 版本释出</title><link>https://macplay.github.io/posts/oni-032-ban-ben-shi-chu/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;!-- This file interpreters the title of URL in links.ref --&gt;
&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="/images/oni_release.png" src="https://macplay.github.io/images/oni_release.png"&gt;
&lt;/div&gt;
&lt;p&gt;本来对这次版本更新还有些不以为然：为何不把精力放在完善 &lt;a class="reference external" href="https://langserver.org/"&gt;Language Server Protocol&lt;/a&gt; 支持，而跑去写什么新手教程呢？直到今天尝试了下教程，又看了文字版更新内容，才明白过来：Oni 编辑器正朝着我期待的方向前进！&lt;/p&gt;
&lt;p&gt;来看看本次更新的两个重要功能：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/oni-032-ban-ben-shi-chu/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>onivim</category><category>vim</category><category>vimrc</category><guid>https://macplay.github.io/posts/oni-032-ban-ben-shi-chu/</guid><pubDate>Sat, 14 Apr 2018 14:55:50 GMT</pubDate></item><item><title>从 URL 构建行内链接</title><link>https://macplay.github.io/posts/cong-url-gou-jian-xing-nei-lian-jie/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;昨天看到论坛有人谈到 &lt;a class="reference external" href="https://emacs-china.org/t/topic/5301"&gt;从 URL 构建 Markdown 行内链接 - Emacs-general - Emacs China&lt;/a&gt; 。其实，这个功能早就存在于 Emmet 插件中。之前个人写 Markdown 文档的时候就用到过，体验非常不错。具体就是：在文档内的链接处按下快捷键，将会自动提取网页标题，并插入 Markdown 风格的行内链接。这样你就不必再额外复制链接标题，甚至个别情况下还得提前在浏览器中打开链接。&lt;/p&gt;
&lt;p&gt;实际上，该功能不仅能构建 Markdown 行内链接，还可以在网页文件中使用 &lt;tt class="docutils literal"&gt;&amp;lt;a&amp;gt;&lt;/tt&gt; 标签构建 HTML 风格的链接。在 Vim 编辑器中，文件类型是自动识别的，因此并不需要额外做什么设置。&lt;/p&gt;
&lt;p&gt;鉴于我个人 &lt;a class="reference external" href="https://macplay.github.io/posts/cong-markdown-dao-restructuredtext/"&gt;从 Markdown 转向 reStructuredText&lt;/a&gt; 已久，对该功能自然而然就用的不多起来。然而，当写 reStructuredText 文档时，当插入链接时不得不皱着眉，分两次分别复制网页链接和标题，再拼凑成 reStructuredText 风格的行内链接时。我总是不由地想起 Markdown 插入链接时的惬意顺畅。只不过，个人比较懒 - - 一直没采取任何行动，忍受着书写体验下降的情况。&lt;/p&gt;
&lt;p&gt;现在经网友这么一提，心思抖起，觉得是时候解决一下这个“小问题”了。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/cong-url-gou-jian-xing-nei-lian-jie/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>markdown</category><category>reST</category><category>vim</category><guid>https://macplay.github.io/posts/cong-url-gou-jian-xing-nei-lian-jie/</guid><pubDate>Sat, 17 Mar 2018 11:57:58 GMT</pubDate></item><item><title>迁移到 onivim</title><link>https://macplay.github.io/posts/qian-yi-dao-onivim/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;!-- This file interpreters the title of URL in links.ref --&gt;
&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;p&gt;关注 &lt;a class="reference external" href="https://github.com/onivim/oni"&gt;Oni: Modern Modal Editing - powered by Neovim&lt;/a&gt; 有一段时间了。根据主页描述，Oni 是个基于 Electron 技术实现的 Neovim 前端，对 &lt;a class="reference external" href="https://langserver.org/"&gt;Language Server Protocol&lt;/a&gt; 支持很全面。不过，之前使用 &lt;a class="reference external" href="https://github.com/qvacua/vimr"&gt;VimR&lt;/a&gt; 还算舒心，而 Oni 则起步较晚，一些功能还不完善。因此并没有动迁移的念头。&lt;/p&gt;
&lt;p&gt;不过最近几天在折腾 &lt;a class="reference external" href="https://macplay.github.io/categories/manjaro/"&gt;manjaro&lt;/a&gt; ，当寻找 Linux 下的 Neovim 前端时，试用了一圈竟然没有一个好用的！或多或少都存在一些问题。于是，无奈之下，我在 U 盘的 manjaro 操作系统上尝试了“臃肿”的 Electron 编辑器。其结果是出乎我意料之外的：Oni 已经达到了日常堪用的水平，而且与我之前的 vimrc 配置协作良好。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/qian-yi-dao-onivim/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>macos</category><category>manjaro</category><category>onivim</category><category>vim</category><category>vimrc</category><guid>https://macplay.github.io/posts/qian-yi-dao-onivim/</guid><pubDate>Thu, 15 Mar 2018 10:08:03 GMT</pubDate></item><item><title>Vim Cheat Sheet</title><link>https://macplay.github.io/posts/vim-cheat-sheet/</link><dc:creator>ashfinal</dc:creator><description>&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://macplay.github.io/images/vim-cheat-sheet-full.png"&gt;&lt;img alt="/images/vim-cheat-sheet-full.thumbnail.png" src="https://macplay.github.io/images/vim-cheat-sheet-full.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;</description><category>chart</category><category>vim</category><guid>https://macplay.github.io/posts/vim-cheat-sheet/</guid><pubDate>Wed, 06 Dec 2017 11:19:24 GMT</pubDate></item><item><title>Emacs 的 Font Lock 性能问题</title><link>https://macplay.github.io/posts/emacs-de-font-lock-xing-neng-wen-ti/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;之前使用 Emacs 总是有点慢，没有 Vim 那种爽冽干脆的感觉。但多半是归咎于臃肿的 spacemacs 配置，不会轻易怀疑 Emacs 本身有什么问题。最近基本上是接近裸状态使用 Emacs 了，不安装第三方插件，也不搞乱七八糟的配置。不过两天前我又遇到了状况，翻来覆去尝试半天，感觉很有可能是 Emacs 的 Font Lock 性能有问题。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/emacs-de-font-lock-xing-neng-wen-ti/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>regex</category><category>vim</category><guid>https://macplay.github.io/posts/emacs-de-font-lock-xing-neng-wen-ti/</guid><pubDate>Fri, 24 Nov 2017 03:53:52 GMT</pubDate></item><item><title>【译】Vim 不需要多光标编辑功能</title><link>https://macplay.github.io/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;Sublime text 首次引入了多光标编辑功能 &lt;a class="footnote-reference" href="https://macplay.github.io/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/#id2" id="id1"&gt;[1]&lt;/a&gt; （据我所知），这意味着可以在多个光标位置同时编辑代码。Vim 有个插件（&lt;a class="reference external" href="https://github.com/terryma/vim-multiple-cursors"&gt;vim-multiple-cursors&lt;/a&gt; ）模仿这一功能，但是存在一些问题。自动补全功能失效，撤销历史与我想象中的不一样，也无法把文本操作映射到某按键，以便在下次 Vim 会话中使用。还有，很难用眼睛跟踪所有光标，特别是当它们处于不同列的时候。使用该插件一段时间后，我得出结论：没有什么操作场景是 &lt;strong&gt;原生&lt;/strong&gt; Vim 特性无法完成的（以个人观点来看，完成的甚至比插件还要好）。&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://macplay.github.io/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;我首次使用多光标编辑，是在 &lt;a class="reference external" href="http://www.scintilla.org/SciTE.html"&gt;SciTE&lt;/a&gt; 中。与 Sublime Text 一样，都使用相同的组件 Scintilla。SciTE 出现时间比 Sublime Text 更早，因此作者这一说法不太准确。——译者注&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>translation</category><category>vim</category><guid>https://macplay.github.io/posts/vim-bu-xu-yao-duo-guang-biao-bian-ji-gong-neng/</guid><pubDate>Tue, 21 Nov 2017 10:42:02 GMT</pubDate></item><item><title>Vim 弄丢了我的数据！</title><link>https://macplay.github.io/posts/vim-nong-diu-liao-wo-de-shu-ju/</link><dc:creator>ashfinal</dc:creator><description>&lt;div class="section" id="id1"&gt;
&lt;h2&gt;悲剧&lt;/h2&gt;
&lt;p&gt;昨天（啊不， &lt;span class="strike"&gt;前天&lt;/span&gt; &lt;span class="amend"&gt;大前天&lt;/span&gt; ）在写 &lt;a class="reference external" href="https://macplay.github.io/posts/zai-vim-zhong-shi-yong-undo-branches/"&gt;undo branches&lt;/a&gt; 那篇文章的时候，&lt;a class="reference external" href="https://github.com/qvacua/vimr"&gt;VimR&lt;/a&gt; 编辑器突然毫无征兆的崩溃退出，导致花费好半天翻译过来的几段文字全部丢失。颇具有讽刺意味的是，当时写的文章正是关于在 Vim 编辑器中如何使用 undo branches，避免丢失你宝贵的资料。事情发生时笔者从浏览器中复制了一段文字，然后直接按下 &lt;cite&gt;CMD + V&lt;/cite&gt; 粘贴，可能是其中含有一些特殊字符……悲剧就这样发生了。&lt;/p&gt;
&lt;p&gt;第一反应是去查看 undo 历史，很不幸那几段文字并没有保存其中。于是悲哀地意识到它们是永远也找不回来了：因为 undo branches 其实是保存文件撤销记录，而不是用来应对这种意外灾难的。&lt;strong&gt;真正的灾难应对机制已经被我关闭。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/vim-nong-diu-liao-wo-de-shu-ju/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>recovery</category><category>vim</category><category>vimrc</category><guid>https://macplay.github.io/posts/vim-nong-diu-liao-wo-de-shu-ju/</guid><pubDate>Mon, 13 Nov 2017 11:57:10 GMT</pubDate></item><item><title>【译】在 Vim 中使用 undo branches</title><link>https://macplay.github.io/posts/zai-vim-zhong-shi-yong-undo-branches/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;Vim 支持标准的 &lt;a class="reference external" href="http://vim.wikia.com/wiki/Undo_and_Redo"&gt;撤销和重做&lt;/a&gt; ，同时还支持 &lt;cite&gt;undo branches&lt;/cite&gt; 。这允许你撤销一些更改，然后再做新的更改，而在此过程中 &lt;strong&gt;所有&lt;/strong&gt; 的更改都在 &lt;cite&gt;undo tree&lt;/cite&gt; 中得到保留。你甚至还能把撤销（undo）记录保存到文件中，下次编辑同一文件时恢复这些记录。本文将向你初步展示如何在 Vim 中使用 &lt;cite&gt;undo branches&lt;/cite&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/zai-vim-zhong-shi-yong-undo-branches/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>translation</category><category>vim</category><guid>https://macplay.github.io/posts/zai-vim-zhong-shi-yong-undo-branches/</guid><pubDate>Mon, 13 Nov 2017 03:14:24 GMT</pubDate></item><item><title>Vim 技巧：匹配数字递增</title><link>https://macplay.github.io/posts/vim-ji-qiao-pi-pei-shu-zi-di-zeng/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;有时候会有将代码中的数字递增/递减的需求，一直没有找到相对简单优雅的做法。今天通过网络搜索加上幸运值暴增，感觉终于比较完善地解决了这个问题，遂作此文记录一下。&lt;/p&gt;
&lt;p&gt;如果我们想将以下代码块中的所有数字，在原有基础上均递增两次：&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_667ffdfecfc947ec9ee9cae13cd74f64-1"&gt;&lt;/a&gt;my_array[1] = 0;
&lt;a name="rest_code_667ffdfecfc947ec9ee9cae13cd74f64-2"&gt;&lt;/a&gt;my_array[2] = 0;
&lt;a name="rest_code_667ffdfecfc947ec9ee9cae13cd74f64-3"&gt;&lt;/a&gt;my_array[3] = 0;
&lt;a name="rest_code_667ffdfecfc947ec9ee9cae13cd74f64-4"&gt;&lt;/a&gt;my_array[4] = 0;
&lt;a name="rest_code_667ffdfecfc947ec9ee9cae13cd74f64-5"&gt;&lt;/a&gt;my_array[5] = 0;
&lt;a name="rest_code_667ffdfecfc947ec9ee9cae13cd74f64-6"&gt;&lt;/a&gt;my_array[6] = 0;
&lt;a name="rest_code_667ffdfecfc947ec9ee9cae13cd74f64-7"&gt;&lt;/a&gt;my_array[7] = 0;
&lt;/pre&gt;&lt;p&gt;即变成以下这样：&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_2ce75ab42d6d4d1c8b16ee3c6b07c0b4-1"&gt;&lt;/a&gt;my_array[3] = 2;
&lt;a name="rest_code_2ce75ab42d6d4d1c8b16ee3c6b07c0b4-2"&gt;&lt;/a&gt;my_array[4] = 2;
&lt;a name="rest_code_2ce75ab42d6d4d1c8b16ee3c6b07c0b4-3"&gt;&lt;/a&gt;my_array[5] = 2;
&lt;a name="rest_code_2ce75ab42d6d4d1c8b16ee3c6b07c0b4-4"&gt;&lt;/a&gt;my_array[6] = 2;
&lt;a name="rest_code_2ce75ab42d6d4d1c8b16ee3c6b07c0b4-5"&gt;&lt;/a&gt;my_array[7] = 2;
&lt;a name="rest_code_2ce75ab42d6d4d1c8b16ee3c6b07c0b4-6"&gt;&lt;/a&gt;my_array[8] = 2;
&lt;a name="rest_code_2ce75ab42d6d4d1c8b16ee3c6b07c0b4-7"&gt;&lt;/a&gt;my_array[9] = 2;
&lt;/pre&gt;&lt;p&gt;&lt;a href="https://macplay.github.io/posts/vim-ji-qiao-pi-pei-shu-zi-di-zeng/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>regex</category><category>vim</category><guid>https://macplay.github.io/posts/vim-ji-qiao-pi-pei-shu-zi-di-zeng/</guid><pubDate>Sun, 05 Nov 2017 12:09:47 GMT</pubDate></item><item><title>【译】8 个 Vim 技巧让你成为专家级用户</title><link>https://macplay.github.io/posts/8-ge-vim-ji-qiao-rang-ni-cheng-wei-zhuan-jia-ji-yong-hu/</link><dc:creator>ashfinal</dc:creator><description>&lt;figure&gt;&lt;img src="https://macplay.github.io/images/vim-tips-tricks.jpg"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;&lt;strong&gt;提要&lt;/strong&gt; ：在这篇文章里，我将用实际例子向你展示一些我最喜爱的 &lt;strong&gt;Vim 技巧&lt;/strong&gt; 。如果你不使用 Vim，这些技巧并不会给你多少理由让你想使用它。但是，如果你已经在使用，那本文无疑会让你成为更专业的 Vim 用户。&lt;/p&gt;
&lt;p&gt;即便最近开始，我越来越多地使用 &lt;a class="reference external" href="https://atom.io/"&gt;Atom&lt;/a&gt; ，然而不使用 &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; 却让我一天也过不下去。并不是因为我不得不使用它，而是这样做让我感到很舒适。&lt;/p&gt;
&lt;p&gt;是的，舒适。当谈及 Vi 编辑器或任何它的变种时，这是个太奇怪的词语，对不对？的确，我承认，Vi 不是那个最符合直觉的文本编辑器。&lt;/p&gt;
&lt;p&gt;但是，经过一些实践及记忆训练后，你可以通过仅仅几次击键，就能完成看似复杂的编辑任务，使用一些别的命令行编辑器无法实现的功能。&lt;/p&gt;
&lt;p&gt;尽管如此，今天我并不想写“Vi 入门介绍”，我想通过个人常用的技巧——一些在其它编辑器中我梦寐以求的技巧，向你展示 Vi(m) 编辑器的真正威力。我并不会对这些技巧做全面的阐释，但我强烈推荐你反复试验，直到你理解它们是如何工作的。&lt;/p&gt;
&lt;p&gt;如果你喜欢 Vim 并想完全掌握它，你也可以参与由 Linux Training Academy 提供的 Vim 在线课程。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/8-ge-vim-ji-qiao-rang-ni-cheng-wei-zhuan-jia-ji-yong-hu/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>terminal</category><category>translation</category><category>vim</category><guid>https://macplay.github.io/posts/8-ge-vim-ji-qiao-rang-ni-cheng-wei-zhuan-jia-ji-yong-hu/</guid><pubDate>Thu, 02 Nov 2017 12:44:53 GMT</pubDate></item></channel></rss>