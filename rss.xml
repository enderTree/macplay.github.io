<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MacPlay</title><link>https://macplay.github.io/</link><description>Share something interesting about byte ocean</description><atom:link href="https://macplay.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:ashfinal@sina.cn"&gt;ashfinal&lt;/a&gt; </copyright><lastBuildDate>Thu, 15 Mar 2018 14:03:15 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>迁移到 onivim</title><link>https://macplay.github.io/posts/qian-yi-dao-onivim/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;!-- This file interpreters the title of URL in links.ref --&gt;
&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;p&gt;关注 &lt;a class="reference external" href="https://github.com/onivim/oni"&gt;Oni: Modern Modal Editing - powered by Neovim&lt;/a&gt; 有一段时间了。根据主页描述，Oni 是个基于 Electron 技术实现的 Neovim 前端，对 &lt;a class="reference external" href="https://langserver.org/"&gt;Language Server Protocol&lt;/a&gt; 支持很全面。不过，之前使用 &lt;a class="reference external" href="https://github.com/qvacua/vimr"&gt;VimR&lt;/a&gt; 还算舒心，而 Oni 则起步较晚，一些功能还不完善。因此并没有动迁移的念头。&lt;/p&gt;
&lt;p&gt;不过最近几天在折腾 &lt;a class="reference external" href="https://macplay.github.io/categories/manjaro/"&gt;manjaro&lt;/a&gt; ，当寻找 Linux 下的 Neovim 前端时，试用了一圈竟然没有一个好用的！或多或少都存在一些问题。于是，无奈之下，我在 U 盘的 manjaro 操作系统上尝试了“臃肿”的 Electron 编辑器。其结果是出乎我意料之外的：Oni 已经达到了日常堪用的水平，而且与我之前的 vimrc 配置协作良好。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/qian-yi-dao-onivim/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>macos</category><category>manjaro</category><category>onivim</category><category>vim</category><category>vimrc</category><guid>https://macplay.github.io/posts/qian-yi-dao-onivim/</guid><pubDate>Thu, 15 Mar 2018 10:08:03 GMT</pubDate></item><item><title>ffmpeg 命令行参数调优</title><link>https://macplay.github.io/posts/ffmpeg-ming-ling-xing-can-shu-diao-you/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;video src="https://macplay.github.io/videos/time_machine.mp4" loop autoplay&gt;
    Your browser does not support the video tag.
&lt;/video&gt;&lt;p&gt;文件大小 325 KB。&lt;/p&gt;
&lt;p&gt;完整命令：&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_a7632db5b1e64d1bb90900d3570e56ab-1"&gt;&lt;/a&gt;&lt;span class="go"&gt;ffmpeg -y -i mv.mp4 -ss 00:02:24.000 -to 00:02:29.000 -c:v libx264 -an -crf 35 -b:v 100k -r 10 -preset slow out.mp4&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;如果加上音轨 &lt;cite&gt;-b:a 11k&lt;/cite&gt; ，则体积上升到 350 KB。&lt;/p&gt;
&lt;p&gt;很理想了。&lt;/p&gt;&lt;/div&gt;</description><category>ffmpeg</category><category>shell</category><category>terminal</category><guid>https://macplay.github.io/posts/ffmpeg-ming-ling-xing-can-shu-diao-you/</guid><pubDate>Sun, 04 Mar 2018 09:44:20 GMT</pubDate></item><item><title>免费辞典 Terminology for macOS</title><link>https://macplay.github.io/posts/mian-fei-zi-dian-terminology-for-macos/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;寻找 &lt;a class="reference external" href="https://www.enlightenment.org/about-terminology"&gt;Terminology 终端&lt;/a&gt; 相关资料时，搜索结果里意外瞥见了 Terminology for OS X Dictionary。点击一看，发现竟然是著名软件 Drafts 作者搞的。根据介绍，Terminology for OS X Dictionary 基于 WordNet 语意索引。WordNet 语意索引估计不少人听说过，理论上应该能提供更多更准确的字词释义。于是不再犹豫，果断下载安装。&lt;/p&gt;
&lt;p&gt;轻度使用两天，说下大概体验：词汇量确实比系统内置的辞典高出不少，系统辞典里找不到翻译的一些字词在 Terminology 中能找到；更重要的是，Terminology 根据语意把一堆相关的字词都显示出来，把你知道的不知道的单词连成一片，这样方便联想记忆互相理解，在不知不觉中提升词汇量。&lt;/p&gt;
&lt;p&gt;Terminology 应该没有版权方面的顾虑。因为只是一个辞典包，毋需安装，复制到对应目录就可以在字典 app 及 QuickLook 中调用。还是借用官方截图说明一下吧：&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="/images/terminology_dictionary.png" src="https://macplay.github.io/images/terminology_dictionary.png"&gt;
&lt;/div&gt;
&lt;p&gt;补充一点：从 「for OS X」这名字也能看出来，这辞典包可能有些年头了。但 macOS 的辞典格式这么多年也没变过，所以正常使用是没有问题的。一点小瑕疵是：显示字体和内置辞典略有不同，还算可以接受吧。&lt;/p&gt;
&lt;p&gt;Terminology for OS X Dictionary 的下载地址： &lt;a class="reference external" href="https://agiletortoise.com/terminology/mac/"&gt;https://agiletortoise.com/terminology/mac/&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>english</category><category>macos</category><category>terminology</category><guid>https://macplay.github.io/posts/mian-fei-zi-dian-terminology-for-macos/</guid><pubDate>Mon, 26 Feb 2018 09:55:07 GMT</pubDate></item><item><title>无题</title><link>https://macplay.github.io/posts/wu-ti/</link><dc:creator>ashfinal</dc:creator><description>&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://macplay.github.io/images/manjaro_w3m.png"&gt;&lt;img alt="/images/manjaro_w3m.thumbnail.png" src="https://macplay.github.io/images/manjaro_w3m.thumbnail.png"&gt;&lt;/a&gt;
&lt;p class="caption"&gt;终端里浏览网页的感觉很奇妙&lt;/p&gt;
&lt;/div&gt;</description><category>i3</category><category>linux</category><category>manjaro</category><category>terminal</category><category>w3m</category><guid>https://macplay.github.io/posts/wu-ti/</guid><pubDate>Fri, 16 Feb 2018 12:58:59 GMT</pubDate></item><item><title>在 reStructuredText 中统一管理引用链接</title><link>https://macplay.github.io/posts/zai-restructuredtext-zhong-tong-yi-guan-li-yin-yong-lian-jie/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;!-- This file interpreters the title of URL in links.ref --&gt;
&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;!-- vim:set et sw=4 ts=4 ft=rst: --&gt;
&lt;p&gt;最近几天又尝试了下 &lt;a class="reference external" href="https://macplay.github.io/categories/latex/"&gt;latex&lt;/a&gt;, 发现 Bibliography 的理念很好。它将文档中所有资料引用统一保存到 &lt;cite&gt;.bib&lt;/cite&gt; 文件中，然后在正文中以别名的形式插入。如果有需要的话，还可以自定义引用的显示格式。这大大简化了参考文献的管理和使用：平时统一维护所有的参考文献，甚至你一生中只需维护一份 &lt;cite&gt;.bib&lt;/cite&gt; 文件；而写作时不必麻烦地复制粘贴，用别名就可以方便地插入参考文献。&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="first sidebar-title"&gt;LibreOffice 的「Navigator」功能&lt;/p&gt;
&lt;div class="last figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://macplay.github.io/images/libreoffice_navigator.png"&gt;&lt;img alt="/images/libreoffice_navigator.thumbnail.png" src="https://macplay.github.io/images/libreoffice_navigator.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;如果要在「现代」文档处理软件中寻找对应的话，大约相当于 LibreOffice 的「Navigator」功能或者其它软件的「媒体库」功能。不同之处在于 Bibliography 针对纯文本文件而优化，不止针对单份文档还能在所有文档中依需要载入。&lt;/p&gt;
&lt;p&gt;尽管笔者平时写博客时并不用参考资料，但插入链接是很常见的操作。而该操作还是挺麻烦的——通常需要在浏览器中输入网址，等待其打开，然后分两次粘贴网址以及网页标题到 &lt;a class="reference external" href="https://github.com/qvacua/vimr"&gt;VimR&lt;/a&gt; 编辑器中。如果能够使用 Bibliography 的方式管理引用链接，则插入链接会方便许多——仅需麻烦一次，则全站博客均可以别名方式引用，毋需再次打开浏览器。显然这种统一管理有利于写作时的思维连贯性。而且今后如果有额外需求，比如想知道某链接在全站被引用了多少次，直接使用 &lt;cite&gt;ag&lt;/cite&gt; 或 &lt;cite&gt;grep&lt;/cite&gt; 命令搜索一下即可。&lt;/p&gt;
&lt;p&gt;另外一个麻烦点在于：博客的站内链接显然有利于读者快速寻找相关内容并跳转浏览，比如 tags 就是站内链接优化很好的一个点。然而插入 tags 也是个比较麻烦、容易打断思路的事情。完全可以将博客内的 tags 「封装」一下，在任何文章中都可以随时快速地插入 tag。实际上，也可以不局限于 tags，一些相对固定的链接均可用相同的手法操作。&lt;/p&gt;
&lt;p&gt;于是笔者花费了半天的时间试验了一下，发现完全可以使用 reStructuredText 的 &lt;cite&gt;include&lt;/cite&gt; 指令实现类似 Bibliography 的功能，对全站所有的链接引用进行统一管理。以下将简单的介绍一下我的做法。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/zai-restructuredtext-zhong-tong-yi-guan-li-yin-yong-lian-jie/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>markdown</category><category>nikola</category><category>reST</category><guid>https://macplay.github.io/posts/zai-restructuredtext-zhong-tong-yi-guan-li-yin-yong-lian-jie/</guid><pubDate>Tue, 13 Feb 2018 02:47:00 GMT</pubDate></item><item><title>数据可视化--Seaborn</title><link>https://macplay.github.io/posts/shu-ju-ke-shi-hua-seaborn/</link><dc:creator>ashfinal</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="No.1-Seaborn-和-Matplotlib-对比"&gt;No.1 Seaborn 和 Matplotlib 对比&lt;a class="anchor-link" href="https://macplay.github.io/posts/shu-ju-ke-shi-hua-seaborn/#No.1-Seaborn-%E5%92%8C-Matplotlib-%E5%AF%B9%E6%AF%94"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;用经典的鸢尾花的数据为例子，来对比一下 seaborn 和 matplotlib&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [42]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DataFrame&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [43]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;iris&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://raw.githubusercontent.com/pydata/pandas/master/pandas/tests/data/iris.csv'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [44]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;iris&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[44]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;SepalLength&lt;/th&gt;
      &lt;th&gt;SepalWidth&lt;/th&gt;
      &lt;th&gt;PetalLength&lt;/th&gt;
      &lt;th&gt;PetalWidth&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;5.1&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
      &lt;td&gt;Iris-setosa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;4.9&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
      &lt;td&gt;Iris-setosa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;4.7&lt;/td&gt;
      &lt;td&gt;3.2&lt;/td&gt;
      &lt;td&gt;1.3&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
      &lt;td&gt;Iris-setosa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4.6&lt;/td&gt;
      &lt;td&gt;3.1&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
      &lt;td&gt;Iris-setosa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;3.6&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
      &lt;td&gt;Iris-setosa&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/shu-ju-ke-shi-hua-seaborn/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>chart</category><category>jupyter</category><category>matplotlib</category><category>python</category><guid>https://macplay.github.io/posts/shu-ju-ke-shi-hua-seaborn/</guid><pubDate>Fri, 09 Feb 2018 14:25:04 GMT</pubDate></item><item><title>使用 Latexmk 编译 tex 文件</title><link>https://macplay.github.io/posts/shi-yong-latexmk-bian-yi-tex-wen-jian/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;尽管老早以前就听说过 Latexmk，但是一直没有用起来。昨天折腾的心思又蠢蠢欲动，于是翻阅了下 Latexmk 手册，最终将其配置为理想状态，于是便有了这篇分享文章。&lt;/p&gt;
&lt;p&gt;如果你还不了解 Latexmk 是什么东东，这里简单的介绍一下：LaTeX 要生成最终的 PDF 文档，如果含有交叉引用、BibTeX、术语表等等，通常需要多次编译才行。而使用 Latexmk 则只需运行一次，它会自动帮你做好其它所有事情。通常情况下，你安装的 LaTeX 发行版已经包含了 Latexmk，我们并不需要手动安装它。&lt;a class="footnote-reference" href="https://macplay.github.io/posts/shi-yong-latexmk-bian-yi-tex-wen-jian/#id4" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为之前对 Latexmk 有一定了解，翻阅手册前确定了基本的目标：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Latexmk 有文件监测的机制。它应该可以做到只需运行一次，然后每次文件保存动作后，自动重新编译。&lt;/li&gt;
&lt;li&gt;它应该最终生成 PDF 文件并预览。之前折腾 LaTeX 的过程中，我发现有时生成的是 xdv 文件。&lt;/li&gt;
&lt;li&gt;最好能直接调用 xelatex 引擎。默认调用 pdflatex 太糟糕了，使用万国码是个很常见的需求。&lt;/li&gt;
&lt;li&gt;修改 Vim 编辑器中的相应配置。个人使用的是 &lt;a class="reference external" href="https://github.com/lervag/vimtex"&gt;vimtex&lt;/a&gt; 插件，记得它是支持 Latexmk 的，但可能需要配置一下。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/shi-yong-latexmk-bian-yi-tex-wen-jian/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>latex</category><category>shell</category><guid>https://macplay.github.io/posts/shi-yong-latexmk-bian-yi-tex-wen-jian/</guid><pubDate>Sat, 13 Jan 2018 11:19:48 GMT</pubDate></item><item><title>Vim Cheat Sheet</title><link>https://macplay.github.io/posts/vim-cheat-sheet/</link><dc:creator>ashfinal</dc:creator><description>&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://macplay.github.io/images/vim-cheat-sheet-full.png"&gt;&lt;img alt="/images/vim-cheat-sheet-full.thumbnail.png" src="https://macplay.github.io/images/vim-cheat-sheet-full.thumbnail.png"&gt;&lt;/a&gt;
&lt;/div&gt;</description><category>chart</category><category>vim</category><guid>https://macplay.github.io/posts/vim-cheat-sheet/</guid><pubDate>Wed, 06 Dec 2017 11:19:24 GMT</pubDate></item><item><title>macOS 的文本替换功能</title><link>https://macplay.github.io/posts/macos-de-wen-ben-ti-huan-gong-neng/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;前一段时间抹盘重装了 High Sierra 系统，发现之前定义好的文本替换全丢了。ᔪ(°ᐤ°)ᔭᐤᑋᑊ̣心想可能是 iCloud 抽风，过几天就同步过来了。然而，等到今天也没见同步过来。多半是永远也过不来了。这造成了非常严重的后果：我无法使用文本替换轻松输入特殊符号，也无法在打字聊天的时候输入颜文字卖萌了！(&amp;gt;_&amp;lt;)ͪͨͧͦ 趁着今天有空，我决定解决掉这个问题。&lt;/p&gt;
&lt;p&gt;首先还是网络搜索了一下，看看文本替换功能是否支持导入导出，或者至少有个可备份的文件。否则，就算这次搞好也还是有数据丢失的风险，那过分依赖该功能就太不明智了。很快找到了来自苹果官方的结果： &lt;a class="reference external" href="https://support.apple.com/en-us/HT204006"&gt;How to export and import text substitutions on your Mac&lt;/a&gt; 。根据这份帮助手册，文本替换是支持导入导出的，而且操作很简单。只需在文本替换 tab 页选中要导出的条目，将其拖放到桌面就会自动生成 &lt;cite&gt;Text Substitutions.plist&lt;/cite&gt; 文件。而要导入数据的话，则直接把该文件拖回到文本替换 tab 页即可。是不是很简单？(ˊo̴̶̷̤⌄o̴̶̷̤ˋ)✧&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/macos-de-wen-ben-ti-huan-gong-neng/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>ime</category><category>macos</category><guid>https://macplay.github.io/posts/macos-de-wen-ben-ti-huan-gong-neng/</guid><pubDate>Fri, 24 Nov 2017 10:28:19 GMT</pubDate></item><item><title>Emacs 的 Font Lock 性能问题</title><link>https://macplay.github.io/posts/emacs-de-font-lock-xing-neng-wen-ti/</link><dc:creator>ashfinal</dc:creator><description>&lt;div&gt;&lt;p&gt;之前使用 Emacs 总是有点慢，没有 Vim 那种爽冽干脆的感觉。但多半是归咎于臃肿的 spacemacs 配置，不会轻易怀疑 Emacs 本身有什么问题。最近基本上是接近裸状态使用 Emacs 了，不安装第三方插件，也不搞乱七八糟的配置。不过两天前我又遇到了状况，翻来覆去尝试半天，感觉很有可能是 Emacs 的 Font Lock 性能有问题。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://macplay.github.io/posts/emacs-de-font-lock-xing-neng-wen-ti/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>regex</category><category>vim</category><guid>https://macplay.github.io/posts/emacs-de-font-lock-xing-neng-wen-ti/</guid><pubDate>Fri, 24 Nov 2017 03:53:52 GMT</pubDate></item></channel></rss>